package views

import "time"
import "fmt"
import "supersolik/greed/pkg/greed"

templ EditIndicator() {
	<span class="text-sm">*</span>
}

templ RecountAnchor() {
	<div
		hidden
		_="on load send recountItems to window then remove me end"
	></div>
}

templ RefreshAnchor() {
	<div
		hidden
		_="on load send refreshContent to window then remove me end"
	></div>
}

type DateTimePickerArgs struct {
	DateTime      time.Time
	DateInputName string
	TimeInputName string
	DateOnly      bool
	ClientLocal   bool
	Disabled      bool
}

func DefaultDateTimePickerArgs(dateTime time.Time, clientLocal bool) DateTimePickerArgs {
	return DateTimePickerArgs{
		DateTime:      dateTime,
		DateInputName: "date",
		TimeInputName: "time",
		DateOnly:      false,
		ClientLocal:   true,
		Disabled:      false,
	}
}

templ DateTimePicker(args DateTimePickerArgs) {
	<!-- default type="datime-local" allows only to pick date -->
	<div
		class="flex items-center"
	>
		<input
			if args.ClientLocal {
				_={ fmt.Sprintf(
					"on load call convertTz(\"%v\") then put getInputDate(it) into me.value",
					args.DateTime.Format(greed.DATETIME_DB_LAYOUT)) }
			}
			readonly?={ args.Disabled }
			class="h-full max-h-6"
			id="date"
			type="date"
			name={ args.DateInputName }
			value={ args.DateTime.Format(time.DateOnly) }
		/>
		if !args.DateOnly {
			<span>&nbsp;</span>
			<input
				if args.ClientLocal {
					_={ fmt.Sprintf(
				"on load call convertTz(\"%v\") then put getInputTime(it) into me.value",
				args.DateTime.Format(greed.DATETIME_DB_LAYOUT)) }
				}
				readonly?={ args.Disabled }
				class="h-full max-h-6"
				id="time"
				type="time"
				name={ args.TimeInputName }
				min="00:00"
				max="23:59"
				value={ args.DateTime.Format(greed.TIME_INPUT_LAYOUT) }
			/>
			if args.ClientLocal {
				<!-- getting the user's timezone -->
				<input
					_="on load call getTimeZone() put it into me.value"
					type="hidden"
					name="tz"
					value=""
				/>
			}
		}
	</div>
}

templ DateRangeInput(dateRange greed.DateRange , disabled bool) {
	<div class="flex flex-row space-x-2">
		<div class="flex flex-row">
			<span>~from:</span>
			@DateTimePicker(DateTimePickerArgs{DateTime: dateRange.DateStart, DateInputName: "date_start", DateOnly: true, ClientLocal: false, Disabled: disabled})
		</div>
		<div class="flex flex-row">
			<span>~to:</span>
			@DateTimePicker(DateTimePickerArgs{DateTime: dateRange.DateEnd, DateInputName: "date_end", DateOnly: true, ClientLocal: false, Disabled: disabled})
		</div>
	</div>
}

templ DateRangePicker(defaultOption greed.DateRangeType) {
	<div
		id="date-range-picker"
		class="flex flex-row items-center space-x-2"
		hx-trigger="load, change from:find select"
		hx-get="/daterange/input"
		hx-target="find #date-range-filter"
		hx-swap="innerHTML"
		hx-include="find select"
		hx-params="*"
	>
		<div
			class="flex flex-row items-center"
		>
			<label for="selected_date_range">~when:</label>
			<select
				_="
				on load 
					if me.value == 'placeholder' add .text-gray-400 to me
				end
				on change
				if me.value == 'placeholder'
					add .text-gray-400 to me
				else
					remove .text-gray-400 from me
				end
				"
				class="appearance-none bg-transparent"
				name="date_range_type"
			>
				for _, option := range greed.DateRangePickerOptions {
					<option
						disabled?={ option.First == greed.NotSelected }
						selected?={ option.First == defaultOption }
						value={ string(option.First) }
					>{ option.Second }</option>
				}
			</select>
		</div>
		<div
			id="date-range-filter"
		></div>
	</div>
}

templ Page(content templ.Component) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<title>$$$ tracker</title>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<script src="https://cdn.tailwindcss.com/3.4.0"></script>
			<script src="https://unpkg.com/hyperscript.org@0.9.12"></script>
			<script src="https://unpkg.com/htmx.org@1.9.10" integrity="sha384-D1Kt99CQMDuVetoL1lrYwg5t+9QdHe7NLX/SoJYkXDFfX37iInKRy5xLSi8nO7UC" crossorigin="anonymous"></script>
		</head>
		<body class="font-mono font-normal text-base">
			<header>
				<div class="flex flex-row p-3 items-baseline">
					<div class="mr-3 flex flex-col">
						<a class="text-lg font-medium" href="/">Greed by @SuperSolik</a>
						<div>
							{ time.Now().UTC().Format(greed.DATE_NICE_LAYOUT) }
						</div>
					</div>
					<div>
						<nav>
							<ul class="flex flex-row space-x-1.5">
								<li>
									<a
										_="on mouseenter toggle .uppercase until mouseleave"
										href="/accounts"
									>[Accounts]</a>
								</li>
								<li>
									<a
										_="on mouseenter toggle .uppercase until mouseleave"
										href="/transactions"
									>[Transactions]</a>
								</li>
							</ul>
						</nav>
					</div>
				</div>
			</header>
			@content
		</body>
		<script>
			function getTimeZone() {
				return Intl.DateTimeFormat().resolvedOptions().timeZone
			}

			function formatDateToLocal(date) {
				const d = typeof date === "string" ? new Date(date) : date;
				return d.toLocaleString(
					undefined,
					{
					  dateStyle: 'short',
					  timeStyle: 'short',
					}
				)
			}

			function convertTz(date, tzString) {
				return new Date((typeof date === "string" ? new Date(date) : date).toLocaleString("en-US", {timeZone: tzString}));   
			}

			function getInputDate(date) {
				return date.toISOString().split('T')[0];
			}

			function getInputTime(date){
				// Specify options for time formatting
				const options = {
				  hour: '2-digit',
				  minute: '2-digit',
				  hour12: false  // Use 24-hour format
				};

				// Format the Date object as a time string
				return date.toLocaleTimeString('en-US', options);
			}

		</script>
	</html>
}
