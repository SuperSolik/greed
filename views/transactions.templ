package views

import "fmt"
import "time"
import "supersolik/greed/pkg"
import "strconv"

templ DateTimePicker(timestamp time.Time, dateOnly, clientLocal bool, disabled bool) {
	<!-- default type="datime-local" allows only to pick date -->
	<div
		class="flex items-center"
	>
		<input
			if clientLocal {
				_={ fmt.Sprintf(
					"on load call convertTz(\"%v\") then put getInputDate(it) into me.value",
					timestamp.Format(greed.DATETIME_DB_LAYOUT)) }
			}
			disabled?={ disabled }
			class="h-full max-h-6"
			id="date"
			type="date"
			name="date"
			value={ timestamp.Format(time.DateOnly) }
		/>
		if !dateOnly {
			<span>&nbsp;</span>
			<input
				if clientLocal {
					_={ fmt.Sprintf(
				"on load call convertTz(\"%v\") then put getInputTime(it) into me.value",
				timestamp.Format(greed.DATETIME_DB_LAYOUT)) }
				}
				disabled?={ disabled }
				class="h-full max-h-6"
				id="time"
				type="time"
				name="time"
				min="00:00"
				max="23:59"
				value={ timestamp.Format(greed.TIME_INPUT_LAYOUT) }
			/>
			if clientLocal {
				<!-- getting the user's timezone -->
				<input
					_="on load call getTimeZone() put it into me.value"
					type="hidden"
					name="tz"
					value=""
				/>
			}
		}
	</div>
}

templ Transaction(transaction greed.Transaction, attrs templ.Attributes) {
	<tr
		{ attrs... }
	>
		<td class="max-w-32 pr-2 py-2 font-normal border-b border-solid border-black">{ transaction.Category.Name }</td>
		<td class="max-w-48 pr-2 py-2 font-normal border-b border-solid border-black">{ transaction.Account.Name }</td>
		<td
			class="w-52 max-w-52 pr-2 py-2 font-normal border-b border-solid border-black"
			_={ fmt.Sprintf("on load call formatDateToLocal(\"%v\") put it into me", transaction.CreatedAt.Format(greed.DATETIME_DB_LAYOUT)) }
		></td>
		<td class="max-w-32 pr-2 py-2 font-normal border-b border-solid border-black">{ transaction.Amount.String() }</td>
		<td class="max-w-48 pr-2 py-2 font-normal border-b border-solid border-black">{ transaction.Description }</td>
		<td class="max-w-52 pr-2 py-2 font-normal border-b border-solid border-black">
			<div class="flex">
				<span>(</span>
				<button
					_="on mouseenter toggle .uppercase until mouseleave"
					type="button"
					hx-get={ fmt.Sprintf("/transactions/%v?edit=true", transaction.Id) }
					hx-target="closest tr"
					hx-swap="outerHTML"
				>
					*edit
				</button>
				<span>|</span>
				<button
					class="h-full"
					_="on mouseenter toggle .uppercase until mouseleave"
					type="button"
					hx-confirm={ fmt.Sprintf("Delete \"%v (%v) - %v\"?", transaction.CreatedAt.Format(time.DateOnly), transaction.Category.Name, transaction.Amount.String()) }
					hx-delete={ fmt.Sprintf("/transactions/%v", transaction.Id) }
					hx-target="closest tr"
					hx-swap="outerHTML"
				>
					~delete
				</button>
				<span>)</span>
			</div>
		</td>
	</tr>
}

templ TransactionForm(transaction greed.Transaction, accounts []greed.Account, categories []greed.Category, create bool) {
	<tr>
		<td class="max-w-32 pr-2 py-2 font-normal border-b border-solid border-black">
			<div class="flex flex-row w-full items-center">
				@EditIndicator()
				<select class="truncate appearance-none bg-transparent w-full" id="category" name="category">
					for _, c := range categories {
						if c.Id == transaction.Category.Id {
							<option value={ fmt.Sprintf("%v;%v", c.Id, c.Name) } selected>{ c.Name }</option>
						} else {
							<option value={ fmt.Sprintf("%v;%v", c.Id, c.Name) }>{ c.Name }</option>
						}
					}
				</select>
			</div>
		</td>
		<td class="max-w-48 pr-2 py-2 font-normal border-b border-solid border-black">
			<div class="flex flex-row w-full items-center">
				@EditIndicator()
				<select class="truncate appearance-none bg-transparent w-full" id="account" name="account">
					for _, a := range accounts {
						if a.Id == transaction.Account.Id {
							<option value={ fmt.Sprintf("%v;%v", a.Id, a.Name) } selected>{ a.Name }</option>
						} else {
							<option value={ fmt.Sprintf("%v;%v", a.Id, a.Name) }>{ a.Name }</option>
						}
					}
				</select>
			</div>
		</td>
		<td class="max-w-52 pr-2 py-2 font-normal border-b border-solid border-black">
			<div class="flex flex-row w-full items-center">
				@EditIndicator()
				@DateTimePicker(transaction.CreatedAt, false, true, false)
			</div>
		</td>
		<td class="max-w-32 pr-2 py-2 font-normal border-b border-solid border-black">
			<div class="flex flex-row w-full items-center">
				@EditIndicator()
				<input class="w-full" name="amount" type="text" placeholder="amount" inputmode="decimal" value={ transaction.Amount.String() }/>
			</div>
		</td>
		<td class="max-w-48 pr-2 py-2 font-normal border-b border-solid border-black">
			<div class="flex flex-row w-full items-center">
				@EditIndicator()
				<input class="w-full" name="description" type="text" placeholder="description" value={ transaction.Description }/>
			</div>
		</td>
		<td class="w-fit max-w-52 pr-2 py-2 font-normal border-b border-solid border-black">
			<div class="h-full flex">
				<span>(</span>
				if create {
					<button
						_="on mouseenter toggle .uppercase until mouseleave"
						type="button"
						hx-post="/transactions"
						hx-include="closest tr"
						hx-target="closest tr"
						hx-swap="outerHTML"
					>
						+create
					</button>
					<span>|</span>
					<button
						_="on mouseenter toggle .uppercase until mouseleave end on click remove closest <tr/> end"
						type="button"
					>
						-cancel
					</button>
				} else {
					<!-- TODO: transaction date update doesn't affect the order, needs a page refresh -->
					<button
						_="on mouseenter toggle .uppercase until mouseleave"
						type="button"
						hx-put={ fmt.Sprintf("/transactions/%v", transaction.Id) }
						hx-target="closest tr"
						hx-include="closest tr"
						hx-swap="outerHTML"
					>
						+save
					</button>
					<span>|</span>
					<button
						class="h-full"
						_="on mouseenter toggle .uppercase until mouseleave"
						type="button"
						hx-get={ fmt.Sprintf("/transactions/%v", transaction.Id) }
						hx-target="closest tr"
						hx-swap="outerHTML"
					>
						-cancel
					</button>
				}
				<span>)</span>
			</div>
		</td>
	</tr>
}

templ Transactions(transactions []greed.Transaction, filter greed.TransactionFilter) {
	for i, t := range transactions {
		if i == len(transactions) - 1 {
			// TODO: optimize, don't put next page fetch 
			//       if the len of current page is less than page size (meaning, for sure we don't have anything more) 
			@Transaction(t, 
				templ.Attributes{
					"hx-trigger": "revealed", 
					"hx-get": fmt.Sprintf("/transactions/content%v", filter.NextPage().BuildQueryParams()), 
					"hx-swap": "afterend",
				},
			)
		} else {
			@Transaction(t, templ.Attributes{})
		}
	}
}

templ DateRangeInput(dateStart, dateEnd time.Time, dateOnly, clientLocal, disabled bool) {
	<div class="flex flex-row space-x-2">
		<div class="flex flex-row">
			<span>~from:</span>
			@DateTimePicker(dateStart, dateOnly, clientLocal, disabled)
		</div>
		<div class="flex flex-row">
			<span>~to:</span>
			@DateTimePicker(dateEnd,  dateOnly ,clientLocal, disabled)
		</div>
	</div>
}

templ FilterForm() {
	<div id="filter-params" hx-params class="p-3 space-y-4">
		<div class="flex flex-row items-center">
			<label for="search">~q:</label>
			<input
				hx-get="/transactions/content"
				hx-trigger="input changed delay:500ms, search"
				hx-target="#transactions-body"
				type="search"
				name="search"
				placeholder="type to search..."
				value=""
			/>
		</div>
		<div
			class="flex flex-row items-center space-x-2"
		>
			<div
				class="flex flex-row items-center"
			>
				<label for="selected_date_range">~d:</label>
				<select
					_="
				on load 
					add .text-gray-400 to me
				end
				on change
				if me.value == 'placeholder'
					add .text-gray-400 to me
				else
					remove .text-gray-400 from me
				end
				"
					hx-trigger="change"
					hx-get="/daterange/input"
					hx-target="#date-range-filter"
					hx-swap="innerHTML"
					hx-params
					class="appearance-none"
					name="date_range_type"
				>
					<option disabled selected value="placeholder">date filter...</option>
					<option value={ greed.None }>-</option>
					<option value={ greed.Today }>today</option>
					<option value={ greed.LastWeek }>last week</option>
					<option value={ greed.Last7Days }>last 7d</option>
					<option value={ greed.LastMonth }>last month</option>
					<option value={ greed.Last30Days }>last 30d</option>
					<option value={ greed.LastYear }>last year</option>
					<option value={ greed.Custom }>custom</option>
				</select>
			</div>
			<div id="date-range-filter"></div>
		</div>
	</div>
}

templ TransactionsData(transactions []greed.Transaction, filter greed.TransactionFilter) {
	<div class="p-3 flex">
		<span>list Transactions[</span>
		<span
			hx-get="/transactions/count"
			hx-trigger="load, refreshContent from:window, recountItems from:window"
			hx-swap="innerHTML"
		>
			{ strconv.Itoa(len(transactions)) }
		</span>
		<span>]:</span>
	</div>
	@FilterForm()
	<div class="px-3">
		<table class="text-left max-w-screen-lg">
			<thead>
				<tr>
					<th class="font-normal tracking-wider pr-2 py-2 border-b border-solid border-black">Category</th>
					<th class="font-normal tracking-wider pr-2 py-2 border-b border-solid border-black">Account</th>
					<th class="font-normal tracking-wider pr-2 py-2 border-b border-solid border-black">When</th>
					<th class="font-normal tracking-wider pr-2 py-2 border-b border-solid border-black">Amount</th>
					<th class="font-normal tracking-wider pr-2 py-2 border-b border-solid border-black">Description</th>
					<th class="font-normal tracking-wider pr-2 py-2 border-b border-solid border-black">
						<button
							_="on mouseenter toggle .uppercase until mouseleave end"
							type="button"
							hx-trigger="click"
							hx-get="/transactions/new"
							hx-target="#transactions-body"
							hx-swap="afterbegin"
						>
							[new+]
						</button>
					</th>
				</tr>
			</thead>
			<tbody
				id="transactions-body"
				hx-get="/transactions/content"
				hx-include="#filter-params"
				hx-params
				hx-trigger="refreshContent delay:0.1s from:window"
			>
				@Transactions(transactions, filter)
			</tbody>
		</table>
	</div>
}
