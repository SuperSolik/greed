package views

import "fmt"
import "time"
import "supersolik/greed/pkg"
import "strconv"

templ DateTimePicker(timestamp time.Time) {
	<!-- default type="datime-local" allows only to pick date -->
	<div
		_={ fmt.Sprintf(
			"on load call convertTz(\"%v\") then put getInputDate(it) into #date.value then put getInputTime(it) into #time.value",
			timestamp.Format(greed.DATETIME_DB_LAYOUT)) }
		class="flex items-center"
	>
		<input class="h-full max-h-6" id="date" type="date" name="date"/>
		<span>&nbsp;</span>
		<input class="h-full max-h-6" id="time" type="time" name="time" min="00:00" max="23:59"/>
		<!-- getting the user's timezone -->
		<input
			_="on load call getTimeZone() put it into me.value"
			type="hidden"
			name="tz"
			value=""
		/>
	</div>
}

templ Transaction(transaction greed.Transaction) {
	<tr>
		<td class="max-w-48 pr-3 py-2 font-normal border-b border-solid border-black">{ transaction.Category.Name }</td>
		<td class="max-w-48 pr-3 py-2 font-normal border-b border-solid border-black">{ transaction.Account.Name }</td>
		<td
			_={ fmt.Sprintf("on load call formatDateToLocal(\"%v\") put it into me", transaction.CreatedAt.Format(greed.DATETIME_DB_LAYOUT)) }
			class="max-w-52 pr-3 py-2 font-normal border-b border-solid border-black"
		></td>
		<td class="max-w-48 pr-3 py-2 font-normal border-b border-solid border-black">{ transaction.Amount.String() }</td>
		<td class="max-w-80 pr-3 py-2 font-normal border-b border-solid border-black">{ transaction.Description }</td>
		<td class="max-w-52 pr-3 py-2 font-normal border-b border-solid border-black">
			<button
				_="on mouseenter toggle .uppercase until mouseleave"
				type="button"
				hx-get={ fmt.Sprintf("/transactions/%v?edit=true", transaction.Id) }
				hx-target="closest tr"
				hx-swap="outerHTML"
			>
				(edit*)
			</button>
		</td>
	</tr>
}

templ TransactionEdit(transaction greed.Transaction, accounts []greed.Account, categories []greed.Category) {
	<tr>
		<td class="pr-3 py-2 font-normal border-b border-solid border-black">
			<div class="flex flex-row w-full">
				<span>*</span>
				<select class="appearance-none bg-transparent w-full" id="category" name="category">
					for _, c := range categories {
						if c.Id == transaction.Category.Id {
							<option value={ fmt.Sprintf("%v;%v", c.Id, c.Name) } selected>{ c.Name }</option>
						} else {
							<option value={ fmt.Sprintf("%v;%v", c.Id, c.Name) }>{ c.Name }</option>
						}
					}
				</select>
			</div>
		</td>
		<td class="pr-3 py-2 font-normal border-b border-solid border-black">
			<div class="flex flex-row w-full">
				<span>*</span>
				<select class="appearance-none bg-transparent w-full" id="account" name="account">
					for _, a := range accounts {
						if a.Id == transaction.Account.Id {
							<option value={ fmt.Sprintf("%v;%v", a.Id, a.Name) } selected>{ a.Name }</option>
						} else {
							<option value={ fmt.Sprintf("%v;%v", a.Id, a.Name) }>{ a.Name }</option>
						}
					}
				</select>
			</div>
		</td>
		<td class="pr-3 py-2 font-normal border-b border-solid border-black">
			<div class="flex flex-row w-full">
				<span>*</span>
				@DateTimePicker(transaction.CreatedAt)
			</div>
		</td>
		<td class="pr-3 py-2 font-normal border-b border-solid border-black">
			<div class="flex flex-row w-full">
				<span>*</span>
				<input class="w-full" name="amount" type="text" placeholder="amount" inputmode="decimal" value={ transaction.Amount.String() }/>
			</div>
		</td>
		<td class="pr-3 py-2 font-normal border-b border-solid border-black">
			<div class="flex flex-row w-full">
				<span>*</span>
				<input class="w-full" name="description" type="text" placeholder="description" value={ transaction.Description }/>
			</div>
		</td>
		<td class="max-w-52 pr-3 py-2 font-normal border-b border-solid border-black">
			<div class="h-full flex">
				<span>(</span>
				<!-- TODO: transaction date update doesn't affect the order, needs a page refresh -->
				<button
					_="on mouseenter toggle .uppercase until mouseleave"
					type="button"
					hx-put={ fmt.Sprintf("/transactions/%v", transaction.Id) }
					hx-target="closest tr"
					hx-include="closest tr"
					hx-swap="outerHTML"
				>
					save
				</button>
				<span>|</span>
				<button
					class="h-full"
					_="on mouseenter toggle .uppercase until mouseleave"
					type="button"
					hx-get={ fmt.Sprintf("/transactions/%v", transaction.Id) }
					hx-target="closest tr"
					hx-swap="outerHTML"
				>
					cancel
				</button>
				<span>|</span>
				<button
					class="h-full"
					_="on mouseenter toggle .uppercase until mouseleave"
					type="button"
					hx-confirm={ fmt.Sprintf("Delete \"%v (%v) - %v\"?", transaction.CreatedAt.Format(time.DateOnly), transaction.Category.Name, transaction.Amount.String()) }
					hx-delete={ fmt.Sprintf("/transactions/%v", transaction.Id) }
					hx-target="closest tr"
					hx-swap="outerHTML"
				>
					delete
				</button>
				<span>)</span>
			</div>
		</td>
	</tr>
}

templ TransactionNew(accounts []greed.Account, categories []greed.Category) {
	<tr id="new-transaction">
		<td class="pr-3 py-2 font-normal border-b border-solid border-black">
			<div class="flex flex-row w-full">
				<span>*</span>
				<select class="appearance-none bg-transparent w-full" id="category" name="category">
					for i, c := range categories {
						if i == 0 {
							<option value={ fmt.Sprintf("%v;%v", c.Id, c.Name) } selected>{ c.Name }</option>
						} else {
							<option value={ fmt.Sprintf("%v;%v", c.Id, c.Name) }>{ c.Name }</option>
						}
					}
				</select>
			</div>
		</td>
		<td class="pr-3 py-2 font-normal border-b border-solid border-black">
			<div class="flex flex-row w-full">
				<span>*</span>
				<select class="appearance-none bg-transparent w-full" id="account" name="account">
					for i, a := range accounts {
						if i == 0 {
							<option value={ fmt.Sprintf("%v;%v", a.Id, a.Name) } selected>{ a.Name }</option>
						} else {
							<option value={ fmt.Sprintf("%v;%v", a.Id, a.Name) }>{ a.Name }</option>
						}
					}
				</select>
			</div>
		</td>
		<td class="pr-3 py-2 font-normal border-b border-solid border-black">
			<div class="flex flex-row w-full">
				<span>*</span>
				@DateTimePicker(time.Now().UTC())
			</div>
		</td>
		<td class="pr-3 py-2 font-normal border-b border-solid border-black">
			<div class="flex flex-row w-full">
				<span>*</span>
				<input class="w-full" name="amount" type="text" placeholder="amount" inputmode="decimal" value="0.0"/>
			</div>
		</td>
		<td class="pr-3 py-2 font-normal border-b border-solid border-black">
			<div class="flex flex-row w-full">
				<span>*</span>
				<input class="w-full" name="description" type="text" placeholder="description" value=""/>
			</div>
		</td>
		<td class="max-w-52 pr-3 py-2 font-normal border-b border-solid border-black">
			<div class="h-full flex">
				<span>(</span>
				<button
					_="on mouseenter toggle .uppercase until mouseleave"
					type="button"
					hx-post="/transactions"
					hx-include="closest tr"
					hx-target="closest tr"
					hx-swap="outerHTML"
				>
					create
				</button>
				<span>|</span>
				<button
					_="on mouseenter toggle .uppercase until mouseleave end on click remove #new-transaction end"
					type="button"
				>
					cancel
				</button>
				<span>)</span>
			</div>
		</td>
	</tr>
}

templ Transactions(transactions []greed.Transaction) {
	<div class="p-3 flex">
		<span>list Transactions[</span>
		<span
			hx-get="/transactions/count"
			hx-trigger="load,  from:#transactions-table throttle:1s"
			hx-swap="innerHTML"
		>
			{ strconv.Itoa(len(transactions)) }
		</span>
		<span>]</span>
	</div>
	<div class="px-3">
		<table class="text-left max-w-screen-lg">
			<thead>
				<tr>
					<th class="font-normal tracking-wider pr-3 py-2 border-b border-solid border-black">Category</th>
					<th class="font-normal tracking-wider pr-3 py-2 border-b border-solid border-black">Account</th>
					<th class="font-normal tracking-wider pr-3 py-2 border-b border-solid border-black">When</th>
					<th class="font-normal tracking-wider pr-3 py-2 border-b border-solid border-black">Amount</th>
					<th class="font-normal tracking-wider pr-3 py-2 border-b border-solid border-black">Description</th>
					<th class="font-normal tracking-wider pr-3 py-2 border-b border-solid border-black">
						<button
							_="on mouseenter toggle .uppercase until mouseleave end"
							type="button"
							hx-trigger="click"
							hx-get="/transactions/new"
							hx-target="#transactions-body"
							hx-swap="afterbegin"
						>
							[new+]
						</button>
					</th>
				</tr>
			</thead>
			<tbody
				id="transactions-body"
				hx-get
				hx-select-oob="#transactions-body"
				hx-trigger="refreshContent delay:0.1s from:window"
			>
				for _, t := range transactions {
					@Transaction(t)
				}
			</tbody>
		</table>
	</div>
}
